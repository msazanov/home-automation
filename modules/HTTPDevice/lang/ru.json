{
	"m_title":"HTTP устройство",
	"m_descr":"Создание устройства основанного на HTTP запросах.",
	"l_schema":"Выберите тип устройства",
	"l_icon":"Иконка",
	"l_setterOn":"URL для действия Включить",
	"p_setterOn":"http://192.168.0.100/action/on",
	"l_setterOff":"URL для действия Выключить",
	"p_setterOff":"http://192.168.0.100/action/off",
	"l_getter":"URL для получения значения",
	"p_getter":"http://192.168.0.100/get/value",
	"l_getterParser_Binary":"JavaScript код для преобразования полученного значения в строки 'on' или 'off'",
	"h_getterParser_Binary":"Поле может быть пустым, если использовать полученную строку без изменений. Пример преобразования: $$$$.split(':')[1] или $$$$.data.metrics.level или $$$$ === 'ON' ? 'on' : 'off'",
	"l_getterPollInterval":"Интервал в секундах опроса значения",
	"h_getterPollInterval":"Пусто или 0 отключают периодический опрос (запросить значение можно вручную командой update)",
	"l_getterParser_Multilevel":"JavaScript код для преобразования полученного значения в число",
	"h_getterParser_Multilevel":"Поле может быть пустым, тогда будет использована функция parseFloat(). Пример преобразования: $$$$.split(':')[1] или parseInt($$$$, 16) или $$$$.data.metrics.level или parseFloat($$$$.findOne(\\\"/A/B[@C='123']/D/text()\\\"))",
	"l_setterLevel":"URL для действия",
	"p_setterLevel":"http://192.168.0.100/action/set/$$$$",
	"h_setterLevel":"Символы $$$$ содержат значение уровня диммирования от 0 до 99 в URL. Например: http://host/dimmer/level/$$$$/set",
	"l_scale":"Единица измерения",
	"l_method":"HTTP метод",
	"l_contentType":"Content type",
	"h_contentType":"Может быть application/json, application/xml, text/html и др. MIME типы.",
	"l_data":"Данные",
	"h_data":"Данные отправляемые в POST запросе. Например строка для передачи текущего значения датчика в виртуальное устройство на Fibaro HC2: {\\\"args\\\":[\\\"ui.Label1.value\\\",\\\"$$$$\\\"]}",
	"l_method":"HTTP метод для получения значения",
	"l_contentType":"Content type для получения значения",
	"h_contentType":"Может быть application/json, application/xml, text/html и др. MIME типы.",
	"l_data":"Data для получения значения",
	"h_data":"Данные отправляемые в POST запросе. Например строка для передачи текущего значения датчика в виртуальное устройство на Fibaro HC2: {\\\"args\\\":[\\\"ui.Label1.value\\\",\\\"$$$$\\\"]}",
	"err_req":"Невозможно выполнить запрос: ",
	"rl_updateOnAction": "Менять состояние при действиях",
	"h_updateOnAction": "При действиях с устройством (включение/выключение/диммирование), менять состояние на соответствующее действию, не дожидаясь получения опроса значения.",
	"rl_skipEventIfSameValue": "Не отправлять событие обновления, если значение не поменялось",
	"h_skipEventIfSameValue": "Если получено значение, совпадающее с предыдущим, не обновлять значение. В этом случае не будут вызваны подписчики на события обновления.",
	"l_login":"Логин",
	"h_login":"Если требуется, задайте логин",
	"l_password":"Пароль",
	"h_password":"Если требуется, задайте пароль"
}{
	"m_title":"HTTP устройство",
	"m_descr":"Это приложение позволяет создать элемент на основе данных, которые вы можете получить из HTTP-запроса. В зависимости от данных вы можете выбрать двоичный датчик или многоуровневый датчик. Также возможно создать элемент, управляющий некоторыми функциями через HTTP: в этом случае вам нужно добавить URL-адрес для выполнения команд; для двоичных переключателей требуется одна ссылка “вкл.” и “выкл.”, для многоуровневого переключения требуется URL-адрес для установки значения. В результате получается новый элемент в интерфейсе умного дома.<br>Настройки:<br><ul><li>Прежде всего, вам нужно выбрать, какой тип элемента будет создан. В зависимости от типа требуются другие настройки.<ol></li><li><strong>sensorBinary</strong> - двоичный датчик имеет 2 состояния: on/off true/false 1/0</li><li><strong>sensorMultilevel</strong> - многоуровневый датчик может быть любым числовым значением: 24°С, 80%, 3,14159...</li><li><strong>switchBinary</strong> - двоичный переключатель, имеет 2 состояния: on/off true/false 1/0, требуется URL для получения значения</li><li><strong>switchMultilevel</strong> - многоуровневый переключатель(димер), может отправлять запрос со значением 0-99,  требуется URL для получения значения.</li><li><strong>toggleButton</strong> - кнопка без обратной связи которая при нажатии выполняет HTTP запрос</li></ol><li>Всем устройствам требуется URL-адрес для получения значения из интернета или локальной сети</li><li>Есть возможность сформировать ответ с помощью&nbsp;логики на JavaScript. Для этого необходимы некоторые углублённые знания JavaScript.</li><li>Интервал в секундах опроса значения.</li><li>Выберите метод POST или GET.</li><li>Для многоуровневого датчика вы можете установить единицу измерения (&deg;С, %, ppm...)</li><li>Для&nbsp; двоичных переключателей&nbsp;могут устанавливаться&nbsp;разные URL.</li>Пример: Приложение должно показывать текущий обменный курс между долларами США и евро. Используемый URL-адрес может быть http://www.floatrates.com/daily/usd.xml . Это XML-файл, поэтому можно отфильтровать реальный обменный курс, используя строку “parseFloat($$$$.findOne('/channel/item/exchangeRate/text()'))”<br>Использование: Приложение создает новый элемент. В случае примера элемент покажет обменный курс.",

	"l_schema":"Выберите тип устройства",
	"l_icon":"Иконка",
	"l_setterOn":"URL для действия Включить",
	"p_setterOn":"http://192.168.0.100/action/on",
	"l_setterOff":"URL для действия Выключить",
	"p_setterOff":"http://192.168.0.100/action/off",
	"l_getter":"URL для получения значения",
	"p_getter":"http://192.168.0.100/get/value",
	"l_getterParser_Binary":"JavaScript код для преобразования полученного значения в строки 'on' или 'off'",
	"h_getterParser_Binary":"Поле может быть пустым, если использовать полученную строку без изменений. Пример преобразования: $$$$.split(':')[1] или $$$$.data.metrics.level или $$$$ === 'ON' ? 'on' : 'off'",
	"l_getterPollInterval":"Интервал в секундах опроса значения",
	"h_getterPollInterval":"Пусто или 0 отключают периодический опрос (запросить значение можно вручную командой update)",
	"l_getterParser_Multilevel":"JavaScript код для преобразования полученного значения в число",
	"h_getterParser_Multilevel":"Поле может быть пустым, тогда будет использована функция parseFloat(). Пример преобразования: $$$$.split(':')[1] или parseInt($$$$, 16) или $$$$.data.metrics.level или parseFloat($$$$.findOne(\\\"/A/B[@C='123']/D/text()\\\"))",
	"l_setterLevel":"URL для действия",
	"p_setterLevel":"http://192.168.0.100/action/set/$$$$",
	"h_setterLevel":"Символы $$$$ содержат значение уровня диммирования от 0 до 99 в URL. Например: http://host/dimmer/level/$$$$/set",
	"l_scale":"Единица измерения",
	"l_method":"HTTP метод",
	"l_contentType":"Content type",
	"h_contentType":"Может быть application/json, application/xml, text/html и др. MIME типы.",
	"l_data":"Данные",
	"h_data":"Данные отправляемые в POST запросе. Например строка для передачи текущего значения датчика в виртуальное устройство на Fibaro HC2: {\\\"args\\\":[\\\"ui.Label1.value\\\",\\\"$$$$\\\"]}",
	
	"l_method":"HTTP метод для запроса",
	"l_contentType":"Content type для запроса",
	"h_contentType":"Может быть application/json, application/xml, text/html и др. MIME типы.",
	"l_data":"Данные для запроса",
	"h_data":"Данные отправляемые в POST запросе. Например строка для передачи текущего значения датчика в виртуальное устройство на Fibaro HC2: {\\\"args\\\":[\\\"ui.Label1.value\\\",\\\"$$$$\\\"]}",
	"l_methodForGetValue":"HTTP метод для получения значения",
	"l_contentTypeForGetValue":"Content type для получения значения",
	"h_contentTypeForGetValue":"Может быть application/json, application/xml, text/html и др. MIME типы.",
	"l_dataForGetValue":"Данные для получения значения",
	"h_dataForGetValue":"Данные отправляемые в POST запросе. Например строка для обращения к API jsonrpc что бы получить значение громкости для медиацентра Kodi {\\\"jsonrpc\\\": \\\"2.0\\\", \\\"method\\\": \\\"Application.GetProperties\\\", \\\"params\\\": { \\\"properties\\\" : [ \\\"volume\\\", \\\"muted\\\" ] }, \\\"id\\\" : 1 }",
	"err_req":"Невозможно выполнить запрос: ",
	"rl_updateOnAction": "Менять состояние при действиях",
	"h_updateOnAction": "При действиях с устройством (включение/выключение/диммирование), менять состояние на соответствующее действию, не дожидаясь получения опроса значения.",
	"rl_skipEventIfSameValue": "Не отправлять событие обновления, если значение не поменялось",
	"h_skipEventIfSameValue": "Если получено значение, совпадающее с предыдущим, не обновлять значение. В этом случае не будут вызваны подписчики на события обновления.",
	"l_login":"Логин",
	"h_login":"Если требуется, задайте логин",
	"l_password":"Пароль",
	"h_password":"Если требуется, задайте пароль"
}
